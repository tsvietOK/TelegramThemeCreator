<Window x:Class="TelegramThemeCreator.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:local="clr-namespace:TelegramThemeCreator" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" x:Name="MainWindow1" Title="Telegram theme creator" Width="490" Height="167.5" Background="#FF282828" Icon="Icon1.ico" Initialized="MainWindow1_Initialized" ResizeMode="CanMinimize" WindowStartupLocation="CenterScreen" mc:Ignorable="d" WindowStyle="None" SnapsToDevicePixels="True">
    <Grid Width="490" HorizontalAlignment="Left">
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Rectangle x:Name="RainbowRectangle" Width="360" Height="10" Margin="61,66,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Fill="Black" Initialized="Rectangle_Initialized" MouseDown="Rainbow_MouseDown" MouseMove="Rainbow_MouseMove" RadiusX="5" RadiusY="5"/>
        <Button x:Name="CreateThemeButton" Width="100" Height="25" Margin="321,100,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" BorderThickness="0" Click="CreateThemeButton_Click" Content="Create theme" FontFamily="Open Sans"/>
        <Rectangle Width="494" Height="21" Margin="-4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Fill="#FF191919" MouseDown="Rectangle_MouseDown"/>
        <Button x:Name="CloseButton" Width="24" Height="21" Margin="466,0,0,147" HorizontalAlignment="Right" VerticalAlignment="Top" BorderThickness="0" Click="Button_Click_1" RenderTransformOrigin="0.5,0.5">
            <Button.Style>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Background" Value="#00000000"/>
                    <Setter Property="Foreground" Value="Gray"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Border Background="{TemplateBinding Background}">
                                    <Grid>
                                        <Path x:Name="PathIcon" Width="24" Height="21" Margin="0,-3,0,0" Data="M 7,7 L 16,16 M 16,7 L 7,16" Fill="#FF707070" Stretch="None" Stroke="#FF707070" StrokeEndLineCap="Round" StrokeStartLineCap="Round" StrokeThickness="2"/>
                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="PathIcon" Property="Stroke" Value="White"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="Button.IsMouseOver" Value="True">
                            <Setter Property="Button.Background" Value="#FFE81123"/>
                            <Setter Property="Button.Foreground" Value="White"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
        <Rectangle x:Name="ColorSquare" Width="34" Height="34" Margin="133,96,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Fill="Black" RadiusX="4" RadiusY="4">
            <Rectangle.ContextMenu>
                <ContextMenu>
                    <MenuItem Click="MenuItem_Click" Header="Copy color code to clipboard"/>
                </ContextMenu>
            </Rectangle.ContextMenu>
        </Rectangle>
        <Button x:Name="GetSystemAccentButton" Width="100" Height="25" Margin="195,100,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" BorderThickness="0" Click="GetSystemAccentButton_Click" Content="System accent" FontFamily="Open Sans"/>
        <TextBlock x:Name="HueValue" Margin="88,96,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" FontFamily="Open Sans" Foreground="White" Text="0" TextWrapping="Wrap"/>
        <TextBlock x:Name="HexColorBlock" Margin="61,112,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" FontFamily="Open Sans" Foreground="White" Text="#FFFFFF" TextWrapping="Wrap"/>
        <TextBlock Margin="62,96,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" FontFamily="Open Sans" Foreground="White" Text="Hue:" TextWrapping="Wrap"/>
        <Canvas x:Name="canvas" Width="364" Height="10" Margin="51,61,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Panel.ZIndex="-1" ScrollViewer.CanContentScroll="True">
            <Rectangle Name="Selector" Canvas.Left="0" Canvas.Top="0" Width="20" Height="20" Panel.ZIndex="1"
                       Fill="{Binding Fill, ElementName=ColorSquare}"
                       RadiusX="10" RadiusY="10" Stroke="White" StrokeThickness="2"/>
        </Canvas>
        <TextBlock Margin="61,28,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" FontFamily="Open Sans" FontSize="16" Foreground="White" Text="Choose your Telegram accent color:" TextWrapping="Wrap"/>
        <Rectangle x:Name="RainbowHelper" Width="360" Height="52" Margin="61,44,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Panel.ZIndex="-2" Fill="#FF282828" MouseDown="Rainbow_MouseDown" MouseMove="Rainbow_MouseMove" RadiusX="5" RadiusY="5"/>
        <CheckBox x:Name="UseWindowsWallpaperCheckBox" Margin="61,143,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Content="Use Windows wallpaper as chat background" FontFamily="Open Sans"
                  Style="{DynamicResource CheckBoxStyle1}"/>
    </Grid>
    <Window.Resources>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#191919"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" CornerRadius="4">
                            <Grid>
                                <ContentPresenter x:Name="MyContentPresenter" Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FF1E1E1E"/>
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#FF232323"/>
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeDashArray="1 2" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FF1E1E1E"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF1E1E1E"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="White"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FF9C9C9C"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FF9C9C9C"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FF232323"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF232323"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="White"/>
        <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="White"/>
        <Style x:Key="CheckBoxStyle1" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="#FF191919"/>
            <Setter Property="BorderBrush" Value="#FF191919"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderThickness" Value="3"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="checkBoxBorder" Margin="1"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="3">
                                <Grid x:Name="markGrid">
                                    <Path x:Name="optionMark" Margin="1" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                          Fill="{StaticResource OptionMark.Static.Glyph}"
                                          Opacity="0" Stretch="None"/>
                                    <Rectangle x:Name="indeterminateMark" Margin="2" Fill="{StaticResource OptionMark.Static.Glyph}" Opacity="0"/>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Focusable="False" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                <Setter Property="Padding" Value="4,1,0,0"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                                <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                                <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Disabled.Background}"/>
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Disabled.Border}"/>
                                <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                <Setter Property="Foreground" Value="#FF9C9C9C"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Pressed.Background}"/>
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Pressed.Border}"/>
                                <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                                <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="optionMark" Property="Opacity" Value="1"/>
                                <Setter TargetName="indeterminateMark" Property="Opacity" Value="0"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter TargetName="optionMark" Property="Opacity" Value="0"/>
                                <Setter TargetName="indeterminateMark" Property="Opacity" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
</Window>
